// Mocks generated by Mockito 5.4.5 from annotations
// in asset_tree/test/features/asset_tree/presentation/widgets/asset_tree_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:asset_tree/features/asset_tree/domain/entities/asset.dart'
    as _i5;
import 'package:asset_tree/features/asset_tree/domain/entities/location.dart'
    as _i6;
import 'package:asset_tree/features/asset_tree/presentation/providers/asset_tree_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AssetTreeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetTreeProvider extends _i1.Mock implements _i2.AssetTreeProvider {
  MockAssetTreeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  String get searchText =>
      (super.noSuchMethod(
            Invocation.getter(#searchText),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#searchText),
            ),
          )
          as String);

  @override
  bool get hasEnergyFilter =>
      (super.noSuchMethod(
            Invocation.getter(#hasEnergyFilter),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasCriticalFilter =>
      (super.noSuchMethod(
            Invocation.getter(#hasCriticalFilter),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadData(String? companyId) =>
      (super.noSuchMethod(
            Invocation.method(#loadData, [companyId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setSearchText(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#setSearchText, [text]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> toggleEnergyFilter() =>
      (super.noSuchMethod(
            Invocation.method(#toggleEnergyFilter, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> toggleCriticalFilter() =>
      (super.noSuchMethod(
            Invocation.method(#toggleCriticalFilter, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void toggleNodeExpansion(String? nodeId) => super.noSuchMethod(
    Invocation.method(#toggleNodeExpansion, [nodeId]),
    returnValueForMissingStub: null,
  );

  @override
  bool isNodeExpanded(String? nodeId) =>
      (super.noSuchMethod(
            Invocation.method(#isNodeExpanded, [nodeId]),
            returnValue: false,
          )
          as bool);

  @override
  List<_i5.Asset> getChildAssets(String? parentId) =>
      (super.noSuchMethod(
            Invocation.method(#getChildAssets, [parentId]),
            returnValue: <_i5.Asset>[],
          )
          as List<_i5.Asset>);

  @override
  List<_i6.Location> getSubLocations(String? parentId) =>
      (super.noSuchMethod(
            Invocation.method(#getSubLocations, [parentId]),
            returnValue: <_i6.Location>[],
          )
          as List<_i6.Location>);

  @override
  List<_i5.Asset> getLocationAssets(String? locationId) =>
      (super.noSuchMethod(
            Invocation.method(#getLocationAssets, [locationId]),
            returnValue: <_i5.Asset>[],
          )
          as List<_i5.Asset>);

  @override
  List<_i6.Location> getRootLocations() =>
      (super.noSuchMethod(
            Invocation.method(#getRootLocations, []),
            returnValue: <_i6.Location>[],
          )
          as List<_i6.Location>);

  @override
  List<_i5.Asset> getUnlinkedAssets() =>
      (super.noSuchMethod(
            Invocation.method(#getUnlinkedAssets, []),
            returnValue: <_i5.Asset>[],
          )
          as List<_i5.Asset>);

  @override
  _i6.Location? getLocation(String? locationId) =>
      (super.noSuchMethod(Invocation.method(#getLocation, [locationId]))
          as _i6.Location?);

  @override
  bool shouldShowAsset(_i5.Asset? asset) =>
      (super.noSuchMethod(
            Invocation.method(#shouldShowAsset, [asset]),
            returnValue: false,
          )
          as bool);

  @override
  bool hasVisibleChildren(_i5.Asset? asset) =>
      (super.noSuchMethod(
            Invocation.method(#hasVisibleChildren, [asset]),
            returnValue: false,
          )
          as bool);

  @override
  bool shouldShowAssetWithParents(_i5.Asset? asset) =>
      (super.noSuchMethod(
            Invocation.method(#shouldShowAssetWithParents, [asset]),
            returnValue: false,
          )
          as bool);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
